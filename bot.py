import telebot
from telebot import types
import json
import random
import sys
import os

def load_users():
    try:
        with open('users.json', 'r', encoding='utf-8') as file:
            return json.load(file)
    except FileNotFoundError:
        return {}
    

def check_and_add_user(user_id):
    try:
        with open('msg.json', 'r', encoding='utf-8') as file:
            data = json.load(file)
    except FileNotFoundError:
        data = []

    if user_id not in data:
        data.append(user_id)
        with open('msg.json', 'w', encoding='utf-8') as file:
            json.dump(data, file, indent=4)

def send_message_to_all_users(text):
    try:
        with open('msg.json', 'r', encoding='utf-8') as file:
            user_ids = json.load(file)

        for user_id in user_ids:
            try:
                bot.send_message(user_id, text)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")

    except FileNotFoundError:
        print("–§–∞–π–ª msg.json –Ω–µ –Ω–∞–π–¥–µ–Ω")


ALLOWED_USERS = ["5688214328", "456"]
#########################################
RESTRICTIONS_ENABLED = False # –ú–ï–ù–Ø–¢–¨ –≠–¢–û 
#########################################

def is_allowed(user_id):
    if RESTRICTIONS_ENABLED and user_id not in ALLOWED_USERS:
        return False
    return True

# PATCHS
commands_file = 'commands.json'
users_file = 'users.json'
users_data = load_users()


bot = telebot.TeleBot('token here')
@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    users_data = load_users()
    user_id = str(message.from_user.id)

    if is_allowed(user_id):
        pass
    else:
        bot.send_message(message.chat.id, "–í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return 

    global commands_message
    users = load_users()
    users_data = load_users()
    user_id = str(message.from_user.id)
    user_id = str(message.from_user.id)

    # –º—ç–π–Ω –∫–æ–º–∞–Ω–¥–∞ –±–æ—Ç–∞
    if message.text == "/start":
        check_and_add_user(user_id)        
        if user_id in users:
            markup = types.InlineKeyboardMarkup()
            top_commands = types.InlineKeyboardButton('–†–µ–π—Ç–∏–Ω–≥ –∫–æ–º–∞–Ω–¥', callback_data='top_list')
            my_command = types.InlineKeyboardButton('–ú–æ—è –∫–æ–º–∞–Ω–¥–∞', callback_data='my_command')
            tasks = types.InlineKeyboardButton('–ó–∞–¥–∞–Ω–∏—è', callback_data='tasks')
            markup.add(top_commands, my_command)
            markup.add(tasks)
            bot.send_message(message.chat.id, "–≠—Ç–æ –º–µ–Ω—é –±–æ—Ç–∞, –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ\n–ù–æ —Å–µ–π—á–∞—Å –µ—Å—Ç—å –¥–µ–ª–æ –ø–æ–≤–∞–∂–Ω–µ–µ - —Å–∫–æ—Ä–µ–µ –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ –∑–∞–¥–∞–Ω–∏—è–º!", reply_markup=markup)
        else:
            photo_path = 'preview.png'
            with open(photo_path, 'rb') as photo:
                bot.send_photo(message.chat.id, photo)
            markup = types.InlineKeyboardMarkup()
            next_step_button = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∞–π', callback_data='next_step_button')
            markup.add(next_step_button)
            bot.send_message(message.chat.id, """
–ü—Ä–∏–≤–µ—Ç! –í —Å–∏—Å—Ç–µ–º—É –Ω–∞—à–µ–≥–æ –∫–æ–ª–ª–µ–¥–∂–∞ –ø—Ä–æ–Ω–∏–∫ –≤–∏—Ä—É—Å, –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Ö–≤–∞—Ç–∏–ª –≥–ª–∞–≤–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —É–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–∏ –≤–∏—Ä—É—Å–∞, –∫–∞–∫ –æ–Ω –ø–æ–ø–∞–ª –≤ —Å–∏—Å—Ç–µ–º—É, –∫—Ç–æ –∑–∞ —ç—Ç–∏–º —Å—Ç–æ–∏—Ç –∏ –∫–∞–∫–æ–π –≤—Ä–µ–¥ –æ–Ω –º–æ–∂–µ—Ç –Ω–∞–Ω–µ—Å—Ç–∏.
–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –Ω–∞ –±–∞–∑–µ –Ω–∞—à–µ–≥–æ –∫–æ–ª–ª–µ–¥–∂–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º, –Ω–æ –≤–∏—Ä—É—Å –æ–∫–∞–∑–∞–ª—Å—è —Å–∏–ª—å–Ω–µ–µ, –∏ —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–º–æ—á—å –Ω–∞–º –æ–¥–æ–ª–µ—Ç—å –≤–∏—Ä—É—Å.

–ö–æ–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –∫–æ–º–ø—å—é—Ç–µ—Ä—É, –≥–¥–µ –±–∞–∑–∏—Ä—É–µ—Ç—Å—è –≤–∏—Ä—É—Å, –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –≤ –æ—Ç–≤–µ—Ç–∞—Ö –Ω–∞ –∑–∞–¥–∞—á–∏.
–î–∞–ª–µ–µ —Ä–∞—Å—Å–∫–∞–∂—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç—É—Ä–Ω–∏—Ä–µ.
""", reply_markup=markup)
            
    elif message.text == "/al":
        markup = types.InlineKeyboardMarkup()
        alist = types.InlineKeyboardButton('–ö–æ–º–∞–Ω–¥—ã', callback_data='atop_list')
        markup.add(alist) 
        bot.send_message(message.chat.id, '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è', reply_markup=markup)
    elif message.text == "/shzpard_luchiy_proger":
        RESTRICTIONS_ENABLED = True
        send_message_to_all_users("üîî –£—á–∞—Å—Ç–Ω–∏–∫–∏!\n3 –∫–æ–º–∞–Ω–¥—ã-—Ñ–∏–Ω–∞–ª–∏—Å—Ç–∞ –±—ã–ª–∏ –Ω–∞–±—Ä–∞–Ω—ã, —Å–±–æ—Ä –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ.")
        sys.exit()
    elif message.text == "/shzpard_top_proger":
        RESTRICTIONS_ENABLED = False
        bot.send_message(message.chat.id, "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")

    elif message.text.startswith("/send"):
        if message.from_user.id == 5688214328:
            if user_id in ALLOWED_USERS:
                text_to_send = message.text.replace("/send", "").strip()
                send_message_to_all_users(text_to_send)
                bot.send_message(message.chat.id, f"–°–æ–æ–±—â–µ–Ω–∏–µ '{text_to_send}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
            else:
                bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


    elif message.text == "/admin":
        user_id = message.from_user.id
        user_status = get_user_status(user_id)
        if user_status == 1:
            markup = types.InlineKeyboardMarkup()
            add_command = types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É', callback_data='add_command')
            give_balls = types.InlineKeyboardButton('–í—ã–¥–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏', callback_data='give_balls')
            markup.add(add_command, give_balls)
            bot.send_message(message.chat.id, "–ù–∞–≤–∏–≥–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n- –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É - –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É\n- –í—ã–¥–∞—Ç—å –±–∞–ª–ª—ã - –≤—ã–¥–∞–µ—Ç –±–∞–ª–ª—ã –∫–æ–º–∞–Ω–¥–µ –ø–æ ID", reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
# –ø–µ—Ä–µ—Ö–æ–¥ –∫ –æ–±—ä—è—Å–Ω–µ–Ω–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ
    if call.data == 'next_step_button':
        user_id = str(call.from_user.id)
        if is_allowed(user_id):
            pass
        else:
            return 
        markup = types.InlineKeyboardMarkup()
        start_step_button = types.InlineKeyboardButton('–ù–∞—á–Ω–µ–º!', callback_data='start_step_button')
        markup.add(start_step_button)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=""" 
–í —Ö–æ–¥–µ —Ç—É—Ä–Ω–∏—Ä–∞ —Ç–µ–±–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏. –ó–∞–ø–æ–º–∏–Ω–∞–π—Ç–µ —á–∞—Å—Ç–∏ —à–∏—Ñ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–∑–Ω–∞–µ—Ç–µ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. –í –∫–æ–Ω—Ü–µ, –æ–Ω–∏ –±—É–¥—É—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –∫–æ–º–ø—å—é—Ç–µ—Ä—É.
                              
""", reply_markup=markup)

 # –≤—ã–±–æ—Ä –∏–≥—Ä—ã –≤ –æ–¥–∏–Ω–æ—á–∫—É –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–∞–Ω–¥–µ       
    elif call.data == 'start_step_button':
        user_id = str(call.from_user.id)
        if is_allowed(user_id):
            pass
        else:
            return 
        markup = types.InlineKeyboardMarkup()
        singleplay = types.InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É', callback_data='singleplay')
        connect_to_command = types.InlineKeyboardButton('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ', callback_data='connect_to_command')
        markup.add(singleplay)
        markup.add(connect_to_command)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–°–æ–∑–¥–∞–π —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π", reply_markup=markup)

# –∏–≥—Ä–∞ –≤ –æ–¥–∏–Ω–æ—á–∫—É, –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã
    elif call.data == 'singleplay':
        user_id = str(call.from_user.id)
        if is_allowed(user_id):
            pass
        else:
            return 
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–°–º–µ–ª–æ–µ —Ä–µ—à–µ–Ω–∏–µ! –ü—Ä–∏–¥—É–º–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã, –æ–Ω–æ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Å–ø–∏—Å–∫–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥")
        bot.register_next_step_handler(call.message, process_user_command)

# –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–∞–Ω–¥–µ  
    elif call.data == 'connect_to_command':
        user_id = str(call.from_user.id)
        if is_allowed(user_id):
            pass
        else:
            return 
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–º–∞–Ω–¥–µ. –ï–≥–æ –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –∫–∞–ø–∏—Ç–∞–Ω–∞")
        bot.register_next_step_handler(call.message, connect_user_to_command)

# –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –º–µ–Ω—é

    elif call.data == 'gostart':
        user_id = str(call.from_user.id)
        if RESTRICTIONS_ENABLED == True:
            if not is_allowed(user_id):
                return
        markup = types.InlineKeyboardMarkup()
        top_commands = types.InlineKeyboardButton('–†–µ–π—Ç–∏–Ω–≥ –∫–æ–º–∞–Ω–¥', callback_data='top_list')
        my_command = types.InlineKeyboardButton('–ú–æ—è –∫–æ–º–∞–Ω–¥–∞', callback_data='my_command')
        tasks = types.InlineKeyboardButton('–ó–∞–¥–∞–Ω–∏—è', callback_data='tasks')
        markup.add(top_commands, my_command)
        markup.add(tasks)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–≠—Ç–æ –º–µ–Ω—é –±–æ—Ç–∞, –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ\n–ù–æ —Å–µ–π—á–∞—Å –µ—Å—Ç—å –¥–µ–ª–æ –ø–æ–≤–∞–∂–Ω–µ–µ - —Å–∫–æ—Ä–µ–µ –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ –∑–∞–¥–∞–Ω–∏—è–º!", reply_markup=markup)

    # –∏–Ω—Ñ–∞ –æ –∫–æ–º–∞–Ω–¥–µ
    
    elif call.data == 'my_command':
        user_id = str(call.from_user.id)
        user_data = load_users()

        if user_id in user_data:
            user_command_id = user_data[user_id]['user_command_id']
            command_data = load_commands()

            if str(user_command_id) in command_data:
                current_task_number = command_data[str(user_command_id)]['now_task']
                if current_task_number == 6:
                    current_task_number = str("–§–∏–Ω–∞–ª")
                command_name = command_data[str(user_command_id)]['command_name']
                ball_value = command_data[str(user_command_id)]['ball']
                captain_username = command_data[str(user_command_id)]['captain_username']
                markup = types.InlineKeyboardMarkup()
                back = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='gostart')
                markup.add(back)
                text = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ:\n" \
                    f"ID: {user_command_id}\n" \
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {command_name}\n" \
                    f"–¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ: {current_task_number}\n" \
                    f"–ö–∞–ø–∏—Ç–∞–Ω –∫–æ–º–∞–Ω–¥—ã: @{captain_username}"

                bot.edit_message_text(chat_id=call.message.chat.id, 
                                    message_id=call.message.message_id,
                                    text=text, reply_markup=markup)
            else:
                bot.edit_message_text(chat_id=call.message.chat.id,
                                    message_id=call.message.message_id,
                                    text="–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        else:
            bot.edit_message_text(chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                text="–í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
             
# –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π
    elif call.data == 'tasks':
        try:
            with open('users.json', 'r', encoding='utf-8') as users_file:
                users_data = json.load(users_file)
                command_data = load_commands()
                user_id = str(call.from_user.id)
                if user_id in users_data:
                    user_data = load_users()
                    user_command_id = user_data[user_id]['user_command_id']
                    current_task_number = command_data[str(user_command_id)]['now_task']
                    task_number = int(current_task_number)
                    
                    with open('tasks.json', 'r', encoding='utf-8') as tasks_file:
                        tasks_data = json.load(tasks_file)
                        current_task = tasks_data.get('task', {}).get(str(task_number))

                        if current_task:
                            task_name = current_task.get('name', '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏')
                            task_fine = current_task.get('fine', '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á–∏')
                            process_task(call, task_name, task_fine)
                        else:
                            markup = types.InlineKeyboardMarkup()
                            goback = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='gostart')
                            markup.add(goback)
                            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π", reply_markup=markup)
                else:
                    bot.edit_message_text(
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id,
                        text="–í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
                    )

        except FileNotFoundError:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="–§–∞–π–ª –∑–∞–¥–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )

# –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ (–ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ—É–Ω–∫—Ü–∏–∏)
    elif call.data == 'give_answer':
        user_id = str(call.from_user.id)
        if is_allowed(user_id):
            pass
        else:
            return 
        markup = types.InlineKeyboardMarkup()
        back_to_tasks = types.InlineKeyboardButton('–ö –∑–∞–¥–∞–Ω–∏—è–º', callback_data='tasks')
        markup.add(back_to_tasks)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ", reply_markup=markup)
        bot.register_next_step_handler(call.message, get_user_answer)

# –ø–æ–¥—Å–∞–∑–∫–∞ –∫ –∑–∞–¥–∞–Ω–∏—é
    elif call.data == 'helpme':
        if is_allowed(user_id):
            pass
        else:
            return 
        user_id = str(call.from_user.id)
        user_data = load_users()
        if user_id in user_data:
            current_task_number = user_data[user_id]['now_task']
            try:
                with open('tasks.json', 'r', encoding='utf-8') as tasks_file:
                    tasks_data = json.load(tasks_file)
                    current_task = tasks_data['task'].get(str(current_task_number))
                    if current_task:
                        task_tip = current_task.get('tip')
                        markup = types.InlineKeyboardMarkup()
                        markup = types.InlineKeyboardMarkup()
                        give_answer = types.InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç', callback_data='give_answer')
                        goback = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='gostart')
                        markup.add(give_answer)
                        markup.add(goback)
                        user_data = load_users()
                        user_command_id = user_data[user_id]['user_command_id']
                        command_data = load_commands()
                        now_balls = command_data[str(user_command_id)]['ball']
                        print(now_balls)
                        command_data[str(user_command_id)]['ball'] -= 1
                        save_commands(command_data)
                        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"‚úÖ –ü–æ–¥—Å–∫–∞–∑–∫–∞: {task_tip}", reply_markup=markup)
                        
                    else:
                        bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è")
            except FileNotFoundError:
                bot.send_message(call.message.chat.id, "–§–∞–π–ª –∑–∞–¥–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else: 
            bot.send_message(call.message.chat.id, "–í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

# —Ç–æ–ø –∫–æ–º–∞–Ω–¥
    elif call.data == 'top_list':
        user_id = str(call.from_user.id)
        if is_allowed(user_id):
            pass
        else:
            return 
        all_commands_text = list_all_commands()
        markup = types.InlineKeyboardMarkup()
        goback = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='gostart')
        markup.add(goback)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=all_commands_text, reply_markup=markup)

    elif call.data == 'amenu':
        markup = types.InlineKeyboardMarkup()
        alist = types.InlineKeyboardButton('–ö–æ–º–∞–Ω–¥—ã', callback_data='atop_list')
        markup.add(alist)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=markup)
    elif call.data == 'atop_list':
        user_id = str(call.from_user.id)
        if is_allowed(user_id):
            pass
        else:
            return 
        all_commands_text = alist_all_commands()
        markup = types.InlineKeyboardMarkup()
        goback = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='amenu')
        markup.add(goback)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=all_commands_text, reply_markup=markup)

    elif call.data == 'top_commands':
        if is_allowed(user_id):
            pass
        else:
            return 
        try:
            all_commands_text = list_all_commands()
            markup = types.InlineKeyboardMarkup()
            give_answer = types.InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç', callback_data='give_answer')
            goback = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='gostart')
            markup.add(give_answer)
            markup.add(goback)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–ó–∞–¥–∞–Ω–∏–µ: {task_name}\nüí≤ –®—Ç—Ä–∞—Ñ –∑–∞ –ø–æ–¥—Å–∫–∞–∑–∫—É: -{task_fine}B\n‚úÖ –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞", reply_markup=markup)
        except:
            markup = types.InlineKeyboardMarkup()
            goback = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='gostart')
            markup.add(goback)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ (#4)", reply_markup=markup)

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
        
def list_all_commands():
    commands_text = ""
    try:
        with open(commands_file, 'r', encoding='utf-8') as file:
            commands_data = json.load(file)
            for command_id, data in commands_data.items():
                user_command = data.get('command_name', '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã')
                now_task = data.get('now_task', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–¥–∞–Ω–∏–∏')
                commands_text += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {user_command}\n–¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ: ‚Ññ{now_task}\n=======================\n"
    except FileNotFoundError:
        commands_text = "–§–∞–π–ª —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    return commands_text

def alist_all_commands():
    commands_text = ""
    try:
        with open(commands_file, 'r', encoding='utf-8') as file:
            commands_data = json.load(file)
            for command_id, data in commands_data.items():
                user_command = data.get('command_name', '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã')
                command_captain = data.get('command_captain', '–ù–µ—Ç id –∫–∞–ø–∏—Ç–∞–Ω–∞')
                captain_username = data.get('captain_username', '–ù–µ—Ç username –∫–∞–ø–∏—Ç–∞–Ω–∞')      
                now_task = data.get('now_task', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–¥–∞–Ω–∏–∏')
                users = data.get('users', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–∞–Ω–¥–µ')
                commands_text += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {user_command} [ID: {command_id}]\n–¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ: ‚Ññ{now_task}\n–ö–∞–ø–∏—Ç–∞–Ω: @{captain_username} ID:({command_captain})\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{users}\n=======================\n"
    except FileNotFoundError:
        commands_text = "–§–∞–π–ª —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    return commands_text

def get_user_answer(message):
    user_id = str(message.from_user.id)
    tasks_file = "tasks.json"
    user_data = load_users()

    if user_id in user_data:
        user_command_id = user_data[user_id]['user_command_id']
        command_data = load_commands()

        if str(user_command_id) in command_data:
            current_task_number = command_data[str(user_command_id)]['now_task']

            try:
                with open(tasks_file, 'r', encoding='utf-8') as file:
                    tasks_data = json.load(file)
                    current_task = tasks_data['task'].get(str(current_task_number))

                    if current_task:
                        task_name = current_task.get('name')
                        correct_answer = current_task.get('answer')
                        next_step = current_task.get('tip')
                        task_hash = current_task.get('hash')
                        user_answer = message.text.strip()

                        if user_answer.lower() == correct_answer.lower():
                            markup = types.InlineKeyboardMarkup()
                            goback = types.InlineKeyboardButton('–í –º–µ–Ω—é', callback_data='gostart')
                            to_answer = types.InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç', callback_data='give_answer')   
                            markup.add(goback, to_answer)
                            if current_task_number == 4:
                                bot.send_message(message.chat.id, "–ù–∞–π–¥–∏—Ç–µ —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞: 17-6-20-18-6-15-12-16 10-18-10-15-1 3-13-1-5-10-14-10-18-16-3-15-1")
                            bot.send_message(message.chat.id, f"#answer\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!\n–ß–∞—Å—Ç—å —à–∏—Ñ—Ä–∞: {correct_answer}\n\n–ò—Å–ø–æ–ª—å–∑—É–π —Ö–µ—à—Ç–µ–≥, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –≤—Å–µ —á–∞—Å—Ç–∏ —à–∏—Ñ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ —É —Ç–µ–±—è –µ—Å—Ç—å –≤ —ç—Ç–æ–º –¥–∏–∞–ª–æ–≥–µ\n‚ùóÔ∏è –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è/–ø–æ–¥—Å–∫–∞–∑–∫—É –∫ –Ω–µ–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∏–∂–µ. –ü–æ–ª—É—á–∏—Ç—å –µ–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–µ–ª—å–∑—è")
                            if current_task_number == 3:
                                photo_path = 'first.jpg'
                                with open(photo_path, 'rb') as photo:
                                    bot.send_photo(message.chat.id, photo)
                            elif current_task_number == 2:
                                photo_path = 'second.jpg'
                                with open(photo_path, 'rb') as photo:
                                    bot.send_photo(message.chat.id, photo)
                            if current_task_number != 5:
                                bot.send_message(message.chat.id, f"{next_step}", reply_markup=markup)
                            else:
                                bot.send_message(message.chat.id, f"–ó–∞–¥–∞–Ω–∏—è –≤ –±–æ—Ç–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –°–∫–æ—Ä–µ–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É –∑–∞–¥–∞–Ω–∏—é!")
                            command_data[str(user_command_id)]['now_task'] = current_task_number + 1
                            command_data[str(user_command_id)]['ball'] += 1
                            save_commands(command_data)
                            user_data[user_id]['now_task'] = current_task_number + 1
                            save_users(user_data)
                            notify_team(current_task_number, user_id, user_command_id)
                            
                        else:
                            markup = types.InlineKeyboardMarkup()
                            back_to_menu = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='tasks')
                            markup.add(back_to_menu)
                            bot.send_message(message.chat.id, "‚ùå –û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π :(\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!", reply_markup=markup)
                    else:
                        markup = types.InlineKeyboardMarkup()
                        back_to_menu = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='gostart')
                        markup.add(back_to_menu)
                        bot.send_message(message.chat.id, "–ï—Å–ª–∏ –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ.", reply_markup=markup)
            except FileNotFoundError:
                bot.send_message(message.chat.id, "–§–∞–π–ª –∑–∞–¥–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            bot.send_message(message.chat.id, "–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    else:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")




# –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ
        
def connect_user_to_command(message):
    global user_connect_to_command
    user_connect_to_command = message.text
    user_chat_id = message.chat.id
    command_id = message.text
    user_id = str(message.from_user.id)
    markup = types.InlineKeyboardMarkup()
    back_to_menu = types.InlineKeyboardButton('–ö –º–µ–Ω—é', callback_data='gostart')
    markup.add(back_to_menu)
    
    with open('commands.json', 'r') as commands_file:
        commands_data = json.load(commands_file)
        
    if command_id not in commands_data:
        markup = types.InlineKeyboardMarkup()
        gotoback = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="start_step_button")
        markup.add(gotoback)
        bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥—ã —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", reply_markup=markup)
        return
    
    bot.send_message(message.chat.id, f"–ó–∞–¥–∞–Ω–∏–µ ‚Ññ1\n–ú–æ–ª–æ–¥—ã–µ –æ—Å–∏–Ω—Ç–µ—Ä—ã, –ø–æ–¥–Ω–∏–º–∏—Ç–µ—Å—å –Ω–∞ 3 —ç—Ç–∞–∂ –≤ —Ö–æ–ª–ª.\n–ü–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∂–¥–µ—Ç –≤–∞—Å!\n–í–∞—à–µ–π –∑–∞–¥–∞—á–µ–π —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–π—Ç–∏ QR-–∫–æ–¥ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π. –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –≤ –±–æ—Ç–∞")
    bot.send_message(message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ!\nID: {command_id}", reply_markup=markup)

    with open('users.json', 'r') as users_file:
        users_data = json.load(users_file)
        users_data[user_id] = {
            "username": message.from_user.username,
            "user_in_command": user_connect_to_command,
            "isCaptain": False,
            "user_command_id": int(command_id),
            "now_task": 1,
            "chat_id": user_chat_id
        }
    with open('users.json', 'w') as users_file:
        json.dump(users_data, users_file, indent=4)
    
    if command_id in commands_data:
        commands_data[command_id]["users"].append(int(user_id))
        with open('commands.json', 'w') as commands_file:
            json.dump(commands_data, commands_file, indent=4)
    else:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–∞–Ω–¥—É.")


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (—Å–æ–ª–æ –∏–≥—Ä–∞)
        
def process_user_command(message):
    global user_command
    user_command = message.text
    command_id = random.randint(100, 999)
    user_id = message.from_user.id
    username = message.from_user.username
    markup = types.InlineKeyboardMarkup()
    gostart = types.InlineKeyboardButton('–ù–∞—á–∏–Ω–∞–µ–º!', callback_data='gostart')
    markup.add(gostart)
    bot.send_message(message.chat.id, f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞\n–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {user_command}\nID –∫–æ–º–∞–Ω–¥—ã: {command_id}")
    bot.send_message(message.chat.id, f"–ó–∞–¥–∞–Ω–∏–µ ‚Ññ1\n–ú–æ–ª–æ–¥—ã–µ –æ—Å–∏–Ω—Ç–µ—Ä—ã, –ø–æ–¥–Ω–∏–º–∏—Ç–µ—Å—å –Ω–∞ 3 —ç—Ç–∞–∂ –≤ —Ö–æ–ª–ª.\n–ü–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∂–¥–µ—Ç –≤–∞—Å!\n–í–∞—à–µ–π –∑–∞–¥–∞—á–µ–π —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–π—Ç–∏ QR-–∫–æ–¥ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π. –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –≤ –±–æ—Ç–∞")
    bot.send_message(message.chat.id, f"–ù–∞—á–Ω–µ–º!", reply_markup=markup)
    save_command(command_id, user_command, user_id, username)


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ
def load_commands():
    try:
        with open(commands_file, 'r', encoding='utf-8') as file:
            return json.load(file)
    except FileNotFoundError:
        return {}

def save_commands(commands):
    with open(commands_file, 'w', encoding='utf-8') as file:
        json.dump(commands, file, indent=4)

def save_command(command_id, user_command, user_id, username):
    try:
        with open(commands_file, 'r', encoding='utf-8') as file:
            commands_data = json.load(file)
    except FileNotFoundError:
        commands_data = {}

    commands_data[str(command_id)] = {
        'command_id': command_id,
        'command_name': user_command,
        'command_captain': user_id,
        'captain_username': username,
        'ball': 2,
        'status': 0,
        'now_task': 1,
        'users': [user_id]
    }

    with open(commands_file, 'w', encoding='utf-8') as file:
        json.dump(commands_data, file, indent=4)

    #################################################

    try: 
        with open(users_file, 'r', encoding='utf-8') as file:
            users_data = json.load(file)
    except FileNotFoundError:
        users_data = {}
    
    users_data[int(user_id)] = {
        'username': username,
        'user_in_command': user_command,
        'isCaptain': True,
        'user_command_id': command_id,
        'now_task': 1,
        'chat_id': user_id
    }
    with open(users_file, 'w', encoding='utf-8') as file:
        json.dump(users_data, file, indent=4)

def get_task_answers():
    with open('tasks.json', 'r') as file:
        tasks_data = json.load(file)
        answers = []
        for task_id, task_info in tasks_data['task'].items():
            if 'answer' in task_info:
                answers.append(task_info['answer'])
        return answers
    
def load_users():
    try:
        with open('users.json', 'r', encoding='utf-8') as file:
            return json.load(file)
    except FileNotFoundError:
        return {}

def save_users(users):
    with open('users.json', 'w', encoding='utf-8') as file:
        json.dump(users, file)

def get_user_status(user_id):
    with open('users.json', 'r') as file:
        users_data = json.load(file)
        user = users_data.get(str(user_id))
        if user:
            return user.get("status")
    return None

def process_task(call, task_name, task_fine):
    markup = types.InlineKeyboardMarkup()
    give_answer = types.InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç', callback_data='give_answer')
    goback = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='gostart')
    markup.add(give_answer)
    markup.add(goback)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"{task_name}",
        reply_markup=markup
    )

def get_task_name(task_number):
    tasks_file = "tasks.json"

    try:
        with open(tasks_file, 'r', encoding='utf-8') as file:
            tasks_data = json.load(file)
            current_task = tasks_data['task'].get(str(task_number))
            if current_task:
                return current_task.get('name', '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è')
    except FileNotFoundError:
        return '–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –∑–∞–¥–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω'

def notify_team(task_number, user_id, user_command_id):
    command_data = load_commands()

    if str(user_command_id) in command_data:
        command_users = command_data[str(user_command_id)]['users']

        for user in command_users:
            user_id_str = str(user)
            if user_id_str != str(user_id):  # –ò—Å–∫–ª—é—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                try:
                    user_chat_id = users_data[user_id_str]['chat_id']
                    print(f"–∫—Ç–æ-—Ç–æ —Ä–µ—à–∏–ª –∑–∞–¥–∞–Ω–∏–µ ({user_chat_id})")
                except KeyError:
                    print(f"–û—à–∏–±–∫–∞: –Ω–µ—Ç 'chat_id' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}")
    else:
        print("–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
bot.polling(none_stop=True, interval=0)